void procesar_mensaje_cpu(int socket, t_msg* msg){
	//print_msg(msg);
	char* buff_pag  = NULL;
	char* buff_pag_esc  = NULL;
	int st,pid,nro_pagina,cant_paginas,marco;
	t_msg* resp = NULL;
	t_proceso* proceso;
	t_pagina* pagina;


//	t_pagina* pagina;

	switch (msg->header.id) {
		case MEM_INICIAR: ///////
			//param 0 cant_paginas
			//param 1 PID

			pid 			= msg->argv[0];
			cant_paginas 	= msg->argv[1];

			log_trace(logger, "Iniciar Proceso %d con %d paginas",pid,cant_paginas);
			destroy_message(msg);

			st = iniciar_proceso_CPU(pid,cant_paginas);

			switch(st){
				case 0:
					resp = argv_message(MEM_OK, 1 ,0);
					enviar_y_destroy_mensaje(socket, resp);
					log_info(logger, "El proceso %d fue inicializado correctamente",pid);
					break;
				case 1:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					enviar_y_destroy_mensaje(socket, resp);
					log_warning(logger, "No hay espacio suficiente para alocar la memoria del proceso %d",pid);
					break;
			}

			break;

		case MEM_LEER: /////////////
			//param 0 PID / 1 Pagina
			pid 		= msg->argv[0];
			nro_pagina  = msg->argv[1];
			destroy_message(msg);
			log_trace(logger, "Leer pagina %d del proceso", nro_pagina,pid);

			// BUSCO EL PROCESO
			gl_PID=pid;
			proceso = list_find(paginas,(void*)es_el_proceso_segun_PID);

			// BUSCO EL MARCO EN LA TLB Y EN LA TABLA DE PAGINAS
			marco = buscar_marco_de_pagina_en_TLB_y_tabla_paginas(pid,nro_pagina);

			// POSIBLES VALORES = >=0 (posicion en memoria) -1 (no esta en memoria) -2 (no existe la pagina)
			if(marco == -2){
				st = 0;
			}else{
				if(marco == -1){
					cant_paginas = list_count_satisfying(proceso->paginas,(void*)la_pagina_esta_cargada_en_memoria);
					marco = encontrar_marco_libre();
					if(marco == -1 /* NO HAY MAS LUGAR*/ && cant_paginas==0 /* NO HAY PAGINAS PARA SACAR*/){
						st=3;
					}else{
						buff_pag = swap_leer_pagina(pid, nro_pagina);
						if(buff_pag != NULL){
							if(cant_paginas<MAXIMO_MARCOS_POR_PROCESO()){
								agregar_pagina_en_memoria(proceso,nro_pagina,buff_pag);
								st = 2;
							}else{
								st = reemplazar_pagina_en_memoria_segun_algoritmo(proceso,nro_pagina,buff_pag);
							}
							sleep(RETARDO_MEMORIA());
						}else{
							st = 1;
						}
					}
				}
				else {
					sleep(RETARDO_MEMORIA());
					buff_pag = string_duplicate(memoria[marco]->contenido);
					st = 2;
				}
			}


			switch(st){
				case 0:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No existe la pagina %d solicitada por el proceso %d",nro_pagina,pid);
					break;
				case 1:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "La pagina %d del proceso %d no fue recibida bien del SWAP",nro_pagina,pid);
					break;
				case 2:
					//sleep(RETARDO_MEMORIA());
					resp = string_message(MEM_OK, buff_pag, 0);
					log_info(logger, "La pagina %d del proceso %d fue leida correctamente",nro_pagina,pid);
					break;
				case 3:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No hay lugar en memoria para guardar la pagina %d del proceso %d",nro_pagina,pid);
					break;
				case 4:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No se pudo guardar la informacion de la pagina desalojada del proceso %d en SWAP",pid);
					break;
			}

			enviar_y_destroy_mensaje(socket, resp);
			FREE_NULL(buff_pag);

			break;

		case MEM_ESCRIBIR:
			//param 0 PID / 1 Pagina
			buff_pag 	= string_duplicate(msg->stream);
			pid 		= msg->argv[0];
			nro_pagina 	= msg->argv[1];
			destroy_message(msg);
			log_trace(logger, "Escribir en Memoria la pagina %d del PID %d y texto: \"%s\"", nro_pagina, pid,buff_pag);

			// BUSCO EL PROCESO y la PAGINA
			gl_PID=pid;
			gl_nro_pagina=nro_pagina;
			proceso = list_find(paginas,(void*)es_el_proceso_segun_PID);
			pagina  = list_find(proceso->paginas,(void*)es_la_pagina_segun_PID_y_nro_pagina);

			// BUSCO EL MARCO EN LA TLB Y EN LA TABLA DE PAGINAS
			marco = buscar_marco_de_pagina_en_TLB_y_tabla_paginas(pid,nro_pagina);

			if(marco == -2){
				st = 0;
			}else{
				if(marco == -1){
					cant_paginas = list_count_satisfying(proceso->paginas,(void*)la_pagina_esta_cargada_en_memoria);
					marco = encontrar_marco_libre();
					if(marco == -1 /* NO HAY MAS LUGAR*/ && cant_paginas==0 /* NO HAY PAGINAS PARA SACAR*/){
						st=3;
					}else{
						// OPCIONAL
						buff_pag_esc = swap_leer_pagina(pid, nro_pagina);
						FREE_NULL(buff_pag_esc);
						// OPCIONAL

						if(buff_pag != NULL){
							if(cant_paginas<MAXIMO_MARCOS_POR_PROCESO()){
								agregar_pagina_en_memoria(proceso,nro_pagina,buff_pag);
								st = 2;
							}else{
								st = reemplazar_pagina_en_memoria_segun_algoritmo(proceso,nro_pagina,buff_pag);
							}
							pagina->modificado=1;
							sleep(RETARDO_MEMORIA());
						}else{
							st = 1;
						}
					}
				}
				else {
					strncpy(memoria[marco]->contenido,buff_pag,TAMANIO_MARCO());
					memoria[marco]->contenido[TAMANIO_MARCO()]='\0';
					pagina->modificado=1;
					sleep(RETARDO_MEMORIA());
					st = 2;
				}
			}

/*
			if(marco == -2){
				st = 0;
				log_error(logger, "No existe la pagina %d del proceso %d",nro_pagina,pid);
			}else{
				if(marco == -1){
					if(memoria->elements_count<CANTIDAD_MARCOS()){
						// OPCIONAL
							buff_pag_esc = swap_leer_pagina(pid, nro_pagina);
							FREE_NULL(buff_pag_esc);
						// OPCIONAL
						gl_PID=pid;
						gl_nro_pagina=nro_pagina;
						cant_paginas = list_count_satisfying(paginas,(void*)es_la_pagina_segun_PID_y_nro_pagina);

						if(cant_paginas<MAXIMO_MARCOS_POR_PROCESO()){
							agregar_pagina_en_memoria(pid,nro_pagina,buff_pag);
							st = 1;
						}else{
							st = reemplazar_pagina_en_memoria_segun_algoritmo(pid,nro_pagina,buff_pag);
						}

					}else{
						st=0;
						log_error(logger, "No hay lugar en memoria para guardar la pagina %d del proceso %d",nro_pagina,pid);
					}
				}
				else {
					sleep(RETARDO_MEMORIA());
					usar_pagina_en_memoria_segun_algoritmo(pid,nro_pagina,marco,flag_TLB);
					pagina_en_memoria = list_get(memoria,marco);
					free(pagina_en_memoria->contenido);
					pagina_en_memoria->contenido=buff_pag;
					st = 1;
					log_info(logger, "La pagina %d del proceso %d fue modificada exitosamente",nro_pagina,pid);
				}
				setear_flag_modificado(pid,nro_pagina);
			}

			if(st==1||st==2){
				resp = argv_message(MEM_OK, 1, 0);
			}else{
				resp = argv_message(MEM_NO_OK, 1, 0);
			}*/

			switch(st){
				case 0:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No existe la pagina %d solicitada por el proceso %d",nro_pagina,pid);
					break;
				case 1:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "La pagina %d del proceso %d no fue recibida bien del SWAP",nro_pagina,pid);
					break;
				case 2:
					//sleep(RETARDO_MEMORIA());
					resp = argv_message(MEM_OK, 1 ,0);
					log_info(logger, "La pagina %d del proceso %d fue escrita correctamente",nro_pagina,pid);
					break;
				case 3:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No hay lugar en memoria para guardar la pagina %d del proceso %d",nro_pagina,pid);
					break;
				case 4:
					resp = argv_message(MEM_NO_OK, 1 ,0);
					log_error(logger, "No se pudo guardar la informacion de la pagina desalojada del proceso %d en SWAP",pid);
					break;
			}

			enviar_y_destroy_mensaje(socket, resp);
			break;

		case MEM_FINALIZAR:
			//param 0 PID
			log_info(logger, "MEM_FINALIZAR");

			gl_PID = msg->argv[0];
			destroy_message(msg);

			// LE AVISO AL SWAP QUE LIBERE EL ESPACIO
			st = swap_finalizar(gl_PID);
			if(st !=0){
				resp = argv_message(MEM_NO_OK, 1, 0);
				enviar_y_destroy_mensaje(socket, resp);
				break;
			}

			// ELIMINO LAS ESTRUCTURAS
			list_remove_and_destroy_by_condition(paginas,(void*)es_el_proceso_segun_PID,(void*)destruir_proceso);

			// LE AVISOA LA CPU COMO TERMINO
			resp = argv_message(MEM_OK, 1, 0);
			enviar_y_destroy_mensaje(socket, resp);
			break;


		case CPU_NUEVO:
			break;

		default:
			log_warning(logger, "LA OPCION SELECCIONADA NO ESTA REGISTRADA");
			break;
	}



	//destroy_message(msg);
}











/*
void borrar_paginas_de_un_proceso_en_la_memoria(t_pagina* pagina){
	if(pagina->PID==gl_PID && pagina->entrada){
		list_remove_and_destroy_element(memoria,pagina->entrada,(void*)destruir_memoria);
	}
}

void compactar_lista_memoria(){
	t_list* aux = list_create(); //CREO LISTA COMO BKP
	list_add_all(aux,memoria);   //MUEVO TOD O LO QUE ESTA EN MEMORIA A LA AUX, ORDENANDOLO
	list_clean(memoria);		 //LIMPIO LA MEMORIA
	list_add_all(memoria,aux);	 //VUELVO A METER TOD O EN LA MEMORIA ORDENADO
}
*/

/*
void borrar_paginas_de_un_proceso_en_la_memoria(t_pagina* pagina){
	if(pagina->PID==gl_PID && pagina->entrada){
		list_remove_and_destroy_element(memoria,pagina->entrada,(void*)destruir_memoria);
	}
}

void compactar_lista_memoria(){
	t_list* aux = list_create(); //CREO LISTA COMO BKP
	list_add_all(aux,memoria);   //MUEVO TOD O LO QUE ESTA EN MEMORIA A LA AUX, ORDENANDOLO
	list_clean(memoria);		 //LIMPIO LA MEMORIA
	list_add_all(memoria,aux);	 //VUELVO A METER TOD O EN LA MEMORIA ORDENADO
}
*/
/*void eliminar_estructuras_de_un_proceso(t_proceso* proceso){
	int i;
	t_pagina_proceso pagina;

	// DEJO DISPONIBLE TODAS LAS ENTRADAS USADAS POR EL PROCESO QUE TIENE EN LA MEMORIA
	for(i=0;i<proceso->cant_paginas;i++){
		pagina = list_get(proceso->paginas,i);
		if(pagina.posicion_memoria!=-1){
				memoria[pagina.posicion_memoria].libre=1;
				memoria[pagina.posicion_memoria].modificado=0;
			}
		if(pagina.posicion_TLB!=-1){
				quitar_de_la_lista_de_prioridad_TLB(proceso->PID,i);
			}
	}

	free(proceso);
}

void quitar_de_la_lista_de_prioridad_TLB(int PID, int pagina){
	int i;
	for(i=0;i<ENTRADAS_TLB();i++){
		if(TLB[i].PID == PID && TLB[i].pagina == pagina){
			TLB[i].PID = -1;
			TLB[i].entrada = -1;
			TLB[i].orden_seleccion = 0;
			TLB[i].pagina = -1;
		} else
			TLB[i].orden_seleccion++;
	}
}

void eliminar_estructuras_de_todos_los_procesos(t_proceso* proceso){
	int i;
	t_pagina_proceso pagina;

	// DEJO DISPONIBLE TODAS LAS ENTRADAS USADAS POR EL PROCESO QUE TIENE EN LA MEMORIA
	for(i=0;i<proceso->cant_paginas;i++){
			pagina = list_get(proceso->paginas,i);
			if(pagina.posicion_memoria!=-1){
					memoria[pagina.posicion_memoria].libre=1;
					memoria[pagina.posicion_memoria].modificado=0;
				}
			if(pagina.posicion_TLB!=-1){
					quitar_de_la_lista_de_prioridad_TLB(proceso->PID,i);
				}
		}

	// LIBERO EL ESPACIO EN EL SWAP
	swap_finalizar(proceso->PID);

	free(proceso);
}

int escribir_pagina(int pid, int pagina, char* contenido){
	int estado;
	t_proceso proceso;
	int entrada;
	int pos_tlb;

	// LE MANDO AL SWAP PARA QUE GUARDE LA INFO
	estado = swap_escribir_pagina(pid, pagina, contenido);
	if(estado==-1) return estado;

	if(string_equals_ignore_case("FIFO",ALGORITMO_REEMPLAZO())){
		entrada = encontrar_pagina_libre_FIFO(pid);
	} else {
		//COMPLETAR CON EL RESTO DE LOS ALGORITMOS
		entrada = 0;
	}

	memoria[entrada].libre = 0;
	memoria[entrada].modificado = 0;
	memoria[entrada].bloque = contenido;

	entrada = encontrar_pagina_en_TLB();
	TLB[pos_tlb].PID = pid;
	TLB[pos_tlb].entrada = entrada;
	TLB[pos_tlb].pagina = pagina;
	TLB[pos_tlb].


	return 1;
}*/






